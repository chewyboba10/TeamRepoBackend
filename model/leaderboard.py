from random import randrange
# import os, base64
from sqlalchemy import Column, Integer, String, Boolean
import json
from __init__ import db
from sqlalchemy.exc import IntegrityError
from datetime import date


class Leaderboard(db.Model):
    _tablename_ = "Snake Leaderboard"
    id = db.Column(db.Integer, primary_key=True)
    score = db.Column(db.Integer, unique=False, nullable=False)
    date = db.Column(db.Integer, unique=False, nullable=False)
    userID = db.Column(db.Integer, db.ForeignKey('users.id'))

    def __init__(self, id, score, date):
        self.userID = id
        self.score = score
        self.date = date

    def __repr__(self):
        return "User:" +str(self.id) + "score:" + self.score + "obtained:" + self.date
    
    def create(self):
        try:
            db.session.add(self)
            db.session.commit()
            return self
        except IntegrityError:
            db.session.remove()
            return None

    def read(self):
        return {
            "id": self.id,
            "userID": self.userID,
            "score": self.score,
            "date": self.date, 
        }

class User(db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    _name = db.Column(db.String(255), unique=False, nullable=False)
    _uid = db.Column(db.String(255), unique=True, nullable=False)
    _score = db.Column(db.Integer, unique=False, nullable=False)
    _dos = db.Column(db.Date)


    posts = db.relationship("Post", cascade='all, delete', backref='users', lazy=True)
    
    def __init__(self, name, uid, score, dos=date.today()):
        self._name = name  
        self._uid = uid
        self._score = score
        self._dos = dos
    
    @property
    def name(self):
        return self._name 

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def uid(self):
        return self._uid

    @uid.setter
    def uid(self, uid):
        self._uid == uid
    
    @property
    def score(self):
        return self._score
    
    @score.setter
    def score(self, score):
        self._score = score

    @property
    def dos(self):
        dos_string = self._dob.strftime('%m-%d-%Y')
        return dos_string
    
    @dos.setter
    def dos(self, dos):
        self._dos = dos
    
    def __str__(self):
        return json.dumps(self.read())

    def create(self):
        try:
            db.session.add(self)
            db.session.commit()
            return self
        except IntegrityError:
            db.session.remove()
            return None

    def read(self):
        return {
            "name": self.name,
            "uid": self.uid,
            "score": self.score,
            "dos": self.dos
        }
    
    def update(self, name="", uid="", score=""):
        """only updates values with length"""
        if len(name) > 0:
            self.name = name
        if len(uid) > 0:
            self.uid = uid
        if len(score) > 0:
            self.score = score
        db.session.commit()
        return self
    
    def delete(self):
        db.session.delete(self)
        db.session.commit()
        return None


# def initScores():
#     # """Create database and tables"""
#     # db.create_all()
#     """Tester data for table"""
#     u1 = User(name='Bobbert', uid='Bob123', score='128', dos=date(2022, 1, 3))
#     u2 = User(name='Mark', uid='Markk', score='100', dos=date(2023, 1, 9))
#     u3 = User(name='Max', uid='mmaxwu', score='98', dos=date(2022, 12, 25))
#     u4 = User(name='Alan', uid='A1234l', score='98', dos=date(2023, 1, 9))
#     u5 = User(name='Evan', uid='chewyboba10', score='98', dos=date(2023, 1, 10))

#     db.session.add(u1)
#     db.session.add(u2)
#     db.session.add(u3)
#     db.session.add(u4)
#     db.session.add(u5)

#     users = [u1, u2, u3, u4, u5]

#     """Builds sample user/note(s) data"""
#     for user in users:
#         try:
#             # '''add a few 1 to 4 notes per user'''
#             # for num in range(randrange(1, 4)):
#             #     note = "#### " + user.name + " note " + str(num) + ". \n Generated by test data."
#             #     user.posts.append(Post(id=user.id, note=note, image='ncs_logo.png'))
#             '''add user/post data to table'''
#             user.create()
#         except IntegrityError:
#             '''fails with bad or duplicate data'''
#             db.session.remove()
#             print(f"Records exist, duplicate email, or error: {user.uid}")